
// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2024 Hugo Melder

#include <cstdint>
#include <verilated.h>
#include <verilated_vcd_c.h>

#include <memory>

#include "Vufp_mul_test.h"
#include "gtest/gtest.h"

static const uint32_t basic_lerp[] = {
    0,        41983,    83967,    125951,   167935,   209919,   251903,
    293886,   335870,   377854,   419838,   461822,   503806,   545789,
    587773,   629757,   671741,   713725,   755709,   797692,   839676,
    881660,   923644,   965628,   1007612,  1049595,  1091579,  1133563,
    1175547,  1217531,  1259515,  1301498,  1343482,  1385466,  1427450,
    1469434,  1511418,  1553401,  1595385,  1637369,  1679353,  1721337,
    1763321,  1805304,  1847288,  1889272,  1931256,  1973240,  2015224,
    2057207,  2099191,  2141175,  2183159,  2225143,  2267127,  2309110,
    2351094,  2393078,  2435062,  2477046,  2519030,  2561013,  2602997,
    2644981,  2686965,  2728949,  2770933,  2812916,  2854900,  2896884,
    2938868,  2980852,  3022836,  3064819,  3106803,  3148787,  3190771,
    3232755,  3274739,  3316722,  3358706,  3400690,  3442674,  3484658,
    3526642,  3568625,  3610609,  3652593,  3694577,  3736561,  3778545,
    3820528,  3862512,  3904496,  3946480,  3988464,  4030448,  4072431,
    4114415,  4156399,  4198383,  4240367,  4282351,  4324334,  4366318,
    4408302,  4450286,  4492270,  4534254,  4576237,  4618221,  4660205,
    4702189,  4744173,  4786157,  4828141,  4870124,  4912108,  4954092,
    4996076,  5038060,  5080044,  5122027,  5164011,  5205995,  5247979,
    5289963,  5331947,  5373930,  5415914,  5457898,  5499882,  5541866,
    5583850,  5625833,  5667817,  5709801,  5751785,  5793769,  5835753,
    5877736,  5919720,  5961704,  6003688,  6045672,  6087656,  6129639,
    6171623,  6213607,  6255591,  6297575,  6339559,  6381542,  6423526,
    6465510,  6507494,  6549478,  6591462,  6633445,  6675429,  6717413,
    6759397,  6801381,  6843365,  6885348,  6927332,  6969316,  7011300,
    7053284,  7095268,  7137251,  7179235,  7221219,  7263203,  7305187,
    7347171,  7389154,  7431138,  7473122,  7515106,  7557090,  7599074,
    7641057,  7683041,  7725025,  7767009,  7808993,  7850977,  7892960,
    7934944,  7976928,  8018912,  8060896,  8102880,  8144863,  8186847,
    8228831,  8270815,  8312799,  8354783,  8396766,  8438750,  8480734,
    8522718,  8564702,  8606686,  8648669,  8690653,  8732637,  8774621,
    8816605,  8858589,  8900572,  8942556,  8984540,  9026524,  9068508,
    9110492,  9152475,  9194459,  9236443,  9278427,  9320411,  9362395,
    9404379,  9446362,  9488346,  9530330,  9572314,  9614298,  9656282,
    9698265,  9740249,  9782233,  9824217,  9866201,  9908185,  9950168,
    9992152,  10034136, 10076120, 10118104, 10160088, 10202071, 10244055,
    10286039, 10328023, 10370007, 10411991, 10453974, 10495958, 10537942,
    10579926, 10621910, 10663894, 10705877, 10747861, 10789845, 10831829,
    10873813, 10915797, 10957780, 10999764, 11041748, 11083732, 11125716,
    11167700, 11209683, 11251667, 11293651, 11335635, 11377619, 11419603,
    11461586, 11503570, 11545554, 11587538, 11629522, 11671506, 11713489,
    11755473, 11797457, 11839441, 11881425, 11923409, 11965392, 12007376,
    12049360, 12091344, 12133328, 12175312, 12217295, 12259279, 12301263,
    12343247, 12385231, 12427215, 12469198, 12511182, 12553166, 12595150,
    12637134, 12679118, 12721101, 12763085, 12805069, 12847053, 12889037,
    12931021, 12973004, 13014988, 13056972, 13098956, 13140940, 13182924,
    13224907, 13266891, 13308875, 13350859, 13392843, 13434827, 13476810,
    13518794, 13560778, 13602762, 13644746, 13686730, 13728713, 13770697,
    13812681, 13854665, 13896649, 13938633, 13980617, 14022600, 14064584,
    14106568, 14148552, 14190536, 14232520, 14274503, 14316487, 14358471,
    14400455, 14442439, 14484423, 14526406, 14568390, 14610374, 14652358,
    14694342, 14736326, 14778309, 14820293, 14862277, 14904261, 14946245,
    14988229, 15030212, 15072196, 15114180, 15156164, 15198148, 15240132,
    15282115, 15324099, 15366083, 15408067, 15450051, 15492035, 15534018,
    15576002, 15617986, 15659970, 15701954, 15743938, 15785921, 15827905,
    15869889, 15911873, 15953857, 15995841, 16037824, 16079808, 16121792,
    16163776, 16205760, 16247744, 16289727, 16331711, 16373695, 16415679,
    16457663, 16499647, 16541630, 16583614, 16625598, 16667582, 16709566,
    16751550};

namespace {

class UfpMulTest : public testing::Test {};

TEST_F(UfpMulTest, OutOfRange) {
  std::unique_ptr<Vufp_mul_test> mul = std::make_unique<Vufp_mul_test>();

  mul->x = 0x20000;
  mul->y = 0x80000000;
  mul->should_clip = 0;
  mul->eval();

  EXPECT_EQ(mul->out, 0x0);
  EXPECT_EQ(mul->clipping, 0); // No clipping
}

TEST_F(UfpMulTest, InRange) {
  std::unique_ptr<Vufp_mul_test> mul = std::make_unique<Vufp_mul_test>();

  mul->x = 0x20000;
  mul->y = 0x70000000;
  mul->should_clip = 0;
  mul->eval();

  EXPECT_EQ(mul->out, 0xe0000000);
  EXPECT_EQ(mul->clipping, 0); // No clipping
}

TEST_F(UfpMulTest, ZeroMulZero) {
  std::unique_ptr<Vufp_mul_test> mul = std::make_unique<Vufp_mul_test>();
  mul->x = 0;
  mul->y = 0;
  mul->should_clip = 0;
  mul->eval();

  EXPECT_EQ(mul->out, 0x0);
  EXPECT_EQ(mul->clipping, 0);
}

TEST_F(UfpMulTest, ZeroMulMax) {
  std::unique_ptr<Vufp_mul_test> mul = std::make_unique<Vufp_mul_test>();
  mul->x = 0;
  mul->y = 0xFFFFFFFF;
  mul->should_clip = 0;
  mul->eval();

  EXPECT_EQ(mul->out, 0x0);
  EXPECT_EQ(mul->clipping, 0);
}

TEST_F(UfpMulTest, OneMulOne) {
  std::unique_ptr<Vufp_mul_test> mul = std::make_unique<Vufp_mul_test>();
  mul->x = 0x00010000; // 1.0 in Q16.16
  mul->y = 0x00010000; // 1.0 in Q16.16
  mul->should_clip = 0;
  mul->eval();

  EXPECT_EQ(mul->out, 0x00010000); // 1.0
  EXPECT_EQ(mul->clipping, 0);
}

TEST_F(UfpMulTest, UnderflowTest) {
  std::unique_ptr<Vufp_mul_test> mul = std::make_unique<Vufp_mul_test>();
  mul->x = 0x00000001; // smallest positive value
  mul->y = 0x00000001;
  mul->should_clip = 0;
  mul->eval();

  EXPECT_EQ(mul->out, 0x0);
  EXPECT_EQ(mul->clipping, 0);
}

// More Advanced Tests

/*
 * Q16.16 Lerp
 *
 *   Smallest Value in Q16.16 = 1/2^16 = 0.0000152588
 *   -> Max Width is 2^16 = 65536
 *
 *  Test Setup
 *   WIDTH = 400
 *   WIDTH_INV = 1/(WIDTH - 1) = 1/399 = 0.0025062657 -> 0x000000a4 (Q16.16)
 *   Error = abs(0.00250244140625 - 0.0025062657) = 0.0000038243
 *
 *   2^8 - Eps
 *   COLOR_MAX = 255.999 -> 0x00ffffbe (Q16.16)
 *
 *   Range Test: WIDTH_INV * Index
 *   Smallest non-zero
 *   0.0025 * 1 = 0.0025
 *   (0xa4 * 0x00010000) >> 16 = 0xa4 -> Exact
 *   Largest
 *   0.0025 * 399 = 0.9975
 *   (0xa4 * 0x18f0000) >> 16 = 0xFF9C (Q16.16)
 *   -> 0.99847412109375
 *
 *   Range Test: (WIDTH_INV * Index) * COLOR_MAX
 *   Smallest non-zero
 *   0.0025 * 255.999 = 0.6399975
 *   (0x000000a4 * 0x00ffffbe) >> 16 =  0xA3FF (Q16.16) -> 0.6406097412109375
 *   Error: 0,0006347412
 */
TEST_F(UfpMulTest, Lerp) {
  std::unique_ptr<Vufp_mul_test> mul = std::make_unique<Vufp_mul_test>();

  const int WIDTH = 400;
  const int WIDTH_INV = 0x000000a4;
  const int COLOR_MAX = 0x00ffffbe;

  for (int i = 0; i < 400; i++) {
    mul->x = (i << 16);
    mul->y = WIDTH_INV;
    mul->should_clip = 1;
    mul->eval();

    uint32_t x = mul->out;

    mul->x = x;
    mul->y = COLOR_MAX;
    mul->should_clip = 1;
    mul->eval();

    EXPECT_EQ(mul->out, basic_lerp[i])
        << "Failed at index i = " << i << ", expected: " << basic_lerp[i]
        << ", got: " << mul->out;
    EXPECT_EQ(mul->clipping, 0); // No clipping
  }
}

} // namespace